# 最终生成的文件
TARGET_FILE = "main.sh"

# main函数文件
PRJ_SRC = "${PWD}/src/main.sh"
# 获取lib目录下所有module的main.sh文件
PRJ_LIB = $(shell find ${PWD}/lib -type f -name 'main.sh') 

export PRJ_LIB

SHELL := $(shell which env) bash

all: finished

# 生成main.sh文件，包含main函数的模板和源文件内容
create_main:
	@echo -e "正在生成 ${TARGET_FILE} 至 ${PWD}"
	@echo -e "#!/usr/bin/env bash\n" > ${TARGET_FILE}
	@echo -e "# AUTOGENERATED, DO NOT EDIT!\n" >> ${TARGET_FILE}
	@echo -e "    生成主函数..."
	@echo -e "function main() {\n" >> ${TARGET_FILE}
	@cat "${PRJ_SRC}" | sed -e 's/^/    /g' >> ${TARGET_FILE}
	@echo -e "\n}\n" >> ${TARGET_FILE}

# 在main.sh文件末尾调用main函数
invoke_main: create_main add_dependencies
	@echo -e "    调用主函数..."
	@echo "main \$$@" >> ${TARGET_FILE}

# 将lib目录下每个module中的main.sh文件内容添加到main.sh中
add_dependencies: create_main
	@echo -e "    链接库文件..."
	@for filename in ${PRJ_LIB}; do \
		cat $$filename >> ${TARGET_FILE}; \
		echo >> ${TARGET_FILE}; \
	done

finished: create_main add_dependencies invoke_main
	@echo "Good! 脚本 ${TARGET_FILE} 已经生成, 位于 ${PWD} 目录下"
	@echo "使用命令: bash ${TARGET_FILE} 运行脚本"

# 打印当前的环境变量，用于调试
info:
	@echo "PWD = ${PWD}"
	@echo "SHELL = ${SHELL}"
	@echo "TARGET_FILE = ${TARGET_FILE}"
	@echo "PRJ_SRC = ${PRJ_SRC}"
	@echo "PRJ_LIB = ${PRJ_LIB}"
